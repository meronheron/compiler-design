#include <iostream>
#include <string>
#include <cctype>
#include <stdexcept>
#include <memory>
#include <vector>

// Token Types
enum class TokenType {
    NUMBER, PLUS, MINUS, MULT, DIV, MOD, INCREMENT, DECREMENT, LPAREN, RPAREN, END
};

// Token Representation
struct Token {
    TokenType type;
    int value; // Only used for numbers

    explicit Token(TokenType type, int value = 0) : type(type), value(value) {}
};

// Lexer Class
class Lexer {
    std::string text;
    size_t pos = 0;
    char current_char;

    void advance() {
        pos++;
        current_char = (pos < text.size()) ? text[pos] : '\0';
    }

    void skip_whitespace() {
        while (std::isspace(current_char)) {
            advance();
        }
    }

    int integer() {
        int result = 0;
        while (std::isdigit(current_char)) {
            result = result * 10 + (current_char - '0');
            advance();
        }
        return result;
    }

public:
    explicit Lexer(const std::string &text) : text(text), current_char(text[0]) {}

    std::vector<Token> tokenize() {
        std::vector<Token> tokens;

        while (current_char != '\0') {
            skip_whitespace();

            if (std::isdigit(current_char)) {
                tokens.emplace_back(TokenType::NUMBER, integer());
                continue;
            }

            if (current_char == '+') {
                advance();
                if (current_char == '+') {
                    advance();
                    tokens.emplace_back(TokenType::INCREMENT);
                } else {
                    tokens.emplace_back(TokenType::PLUS);
                }
                continue;
            }

            if (current_char == '-') {
                advance();
                if (current_char == '-') {
                    advance();
                    tokens.emplace_back(TokenType::DECREMENT);
                } else {
                    tokens.emplace_back(TokenType::MINUS);
                }
                continue;
            }

            if (current_char == '*') {
                tokens.emplace_back(TokenType::MULT);
                advance();
                continue;
            }

            if (current_char == '%') {
                tokens.emplace_back(TokenType:: MOD);
                advance();
                continue;
            }

            if (current_char == '/') {
                tokens.emplace_back(TokenType::DIV);
                advance();
                continue;
            }

            if (current_char == '(') {
                tokens.emplace_back(TokenType::LPAREN);
                advance();
                continue;
            }

            if (current_char == ')') {
                tokens.emplace_back(TokenType::RPAREN);
                advance();
                continue;
            }

            throw std::runtime_error("Invalid character in expression");
        }

        tokens.emplace_back(TokenType::END);
        return tokens;
    }
};

// Abstract Syntax Tree Nodes
struct ASTNode {
    virtual ~ASTNode() = default;
};

struct NumberNode : public ASTNode {
    int value;

    explicit NumberNode(int value) : value(value) {}
};

struct UnaryOpNode : public ASTNode {
    TokenType op;
    std::unique_ptr<ASTNode> operand;

    UnaryOpNode(TokenType op, std::unique_ptr<ASTNode> operand)
        : op(op), operand(std::move(operand)) {}
};

struct BinaryOpNode : public ASTNode {
    TokenType op;
    std::unique_ptr<ASTNode> left;
    std::unique_ptr<ASTNode> right;

    BinaryOpNode(TokenType op, std::unique_ptr<ASTNode> left, std::unique_ptr<ASTNode> right)
        : op(op), left(std::move(left)), right(std::move(right)) {}
};

struct PostfixOpNode : public ASTNode {
    TokenType op;
    std::unique_ptr<ASTNode> operand;

    PostfixOpNode(TokenType op, std::unique_ptr<ASTNode> operand)
        : op(op), operand(std::move(operand)) {}
};

// Parser Class
class Parser {
    std::vector<Token> tokens;
    size_t pos = 0;

    Token current_token() const {
        return tokens[pos];
    }

    void eat(TokenType type) {
        if (current_token().type == type) {
            pos++;
        } else {
            throw std::runtime_error("Syntax error");
        }
    }

    std::unique_ptr<ASTNode> factor() {
        Token token = current_token();

        if (token.type == TokenType::NUMBER) {
            eat(TokenType::NUMBER);
            // Check for postfix operators
            if (current_token().type == TokenType::INCREMENT || current_token().type == TokenType::DECREMENT) {
                TokenType postfix_op = current_token().type;
                eat(postfix_op);
                return std::make_unique<PostfixOpNode>(postfix_op, std::make_unique<NumberNode>(token.value));
            }
            return std::make_unique<NumberNode>(token.value);
        } else if (token.type == TokenType::PLUS || token.type == TokenType::MINUS ||
                   token.type == TokenType::INCREMENT || token.type == TokenType::DECREMENT) {
            eat(token.type);
            return std::make_unique<UnaryOpNode>(token.type, factor());
        } else if (token.type == TokenType::LPAREN) {
            eat(TokenType::LPAREN);
            auto node = expr();
            eat(TokenType::RPAREN);
            return node;
        }

        throw std::runtime_error("Invalid factor");
    }

    std::unique_ptr<ASTNode> term() {
        auto node = factor();

        while (current_token().type == TokenType::MULT || current_token().type == TokenType::DIV
        || current_token().type == TokenType::MOD) {
            Token token = current_token();
            eat(token.type);
            node = std::make_unique<BinaryOpNode>(token.type, std::move(node), factor());
        }

        return node;
    }

    std::unique_ptr<ASTNode> expr() {
        auto node = term();

        while (current_token().type == TokenType::PLUS || current_token().type == TokenType::MINUS) {
            Token token = current_token();
            eat(token.type);
            node = std::make_unique<BinaryOpNode>(token.type, std::move(node), term());
        }

        return node;
    }

public:
    explicit Parser(std::vector<Token> tokens) : tokens(std::move(tokens)) {}

    std::unique_ptr<ASTNode> parse() {
        return expr();
    }
};

// Evaluator Class
class Evaluator {
public:
    int eval(const ASTNode *node) {
        if (const auto *num_node = dynamic_cast<const NumberNode *>(node)) {
            return num_node->value;
        }

        if (const auto *unary_node = dynamic_cast<const UnaryOpNode *>(node)) {
            int value = eval(unary_node->operand.get());
            if (unary_node->op == TokenType::PLUS) {
                return +value;
            } else if (unary_node->op == TokenType::MINUS) {
                return -value;
            } else if (unary_node->op == TokenType::INCREMENT) {
                return value + 1;
            } else if (unary_node->op == TokenType::DECREMENT) {
                return value - 1;
            }
        }

        if (const auto *postfix_node = dynamic_cast<const PostfixOpNode *>(node)) {
            int value = eval(postfix_node->operand.get());
            if (postfix_node->op == TokenType::INCREMENT) {
                return value; // Post-increment
            } else if (postfix_node->op == TokenType::DECREMENT) {
                return value; // Post-decrement
            }
        }

        if (const auto *binary_node = dynamic_cast<const BinaryOpNode *>(node)) {
            int left = eval(binary_node->left.get());
            int right = eval(binary_node->right.get());

            switch (binary_node->op) {
                case TokenType::PLUS: return left + right;
                case TokenType::MINUS: return left - right;
                case TokenType::MULT: return left * right;
                case TokenType::DIV: return left / right;
                case TokenType::MOD: return left % right;
                default: throw std::runtime_error("Unknown binary operator");
            }
        }

        throw std::runtime_error("Unknown AST node");
    }
};

// Main Function
int main() {
    try {
        std::string input;
        std::cout << "Enter a mathematical expression: ";
        std::getline(std::cin, input);

        Lexer lexer(input);
        auto tokens = lexer.tokenize();

        Parser parser(tokens);
        auto ast = parser.parse();

        Evaluator evaluator;
        int result = evaluator.eval(ast.get());

        std::cout << "Result: " << result << "\n";
    } catch (const std::exception &e) {
        std::cerr << "Error: " << e.what() << "\n";
    }

    return 0;
}
